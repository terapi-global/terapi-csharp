/* 
 * Terapi.Web.Api-v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Terapi.Client.Client;
using Terapi.Client.Model;

namespace Terapi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IApiProxyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CallActionResponse</returns>
        CallActionResponse ApiProxyEndpointDelete (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody6 body = null);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        ApiResponse<CallActionResponse> ApiProxyEndpointDeleteWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody6 body = null);
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="xTenantId"></param>
        /// <returns>CallActionResponse</returns>
        CallActionResponse ApiProxyEndpointGet (string integrationName, string endpoint, Guid? xTenantId);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="xTenantId"></param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        ApiResponse<CallActionResponse> ApiProxyEndpointGetWithHttpInfo (string integrationName, string endpoint, Guid? xTenantId);
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CallActionResponse</returns>
        CallActionResponse ApiProxyEndpointPatch (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody9 body = null);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        ApiResponse<CallActionResponse> ApiProxyEndpointPatchWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody9 body = null);
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CallActionResponse</returns>
        CallActionResponse ApiProxyEndpointPost (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody3 body = null);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        ApiResponse<CallActionResponse> ApiProxyEndpointPostWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody3 body = null);
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CallActionResponse</returns>
        CallActionResponse ApiProxyEndpointPut (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody body = null);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        ApiResponse<CallActionResponse> ApiProxyEndpointPutWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>OAuth2ChallengeDtoResponse</returns>
        OAuth2ChallengeDtoResponse ApiProxyOauth2ChallengeGet (Guid? tenantId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>ApiResponse of OAuth2ChallengeDtoResponse</returns>
        ApiResponse<OAuth2ChallengeDtoResponse> ApiProxyOauth2ChallengeGetWithHttpInfo (Guid? tenantId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId"></param>
        /// <returns>UnifiedContactResponse</returns>
        UnifiedContactResponse ApiProxyUnifiedContactsExternalIdGet (string externalId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId"></param>
        /// <returns>ApiResponse of UnifiedContactResponse</returns>
        ApiResponse<UnifiedContactResponse> ApiProxyUnifiedContactsExternalIdGetWithHttpInfo (string externalId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnifiedContactsListResponse</returns>
        UnifiedContactsListResponse ApiProxyUnifiedContactsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnifiedContactsListResponse</returns>
        ApiResponse<UnifiedContactsListResponse> ApiProxyUnifiedContactsGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CallActionResponse</returns>
        System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointDeleteAsync (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody6 body = null);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointDeleteAsyncWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody6 body = null);
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="xTenantId"></param>
        /// <returns>Task of CallActionResponse</returns>
        System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointGetAsync (string integrationName, string endpoint, Guid? xTenantId);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="xTenantId"></param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointGetAsyncWithHttpInfo (string integrationName, string endpoint, Guid? xTenantId);
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CallActionResponse</returns>
        System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointPatchAsync (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody9 body = null);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointPatchAsyncWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody9 body = null);
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CallActionResponse</returns>
        System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointPostAsync (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody3 body = null);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointPostAsyncWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody3 body = null);
        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CallActionResponse</returns>
        System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointPutAsync (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody body = null);

        /// <summary>
        /// 21_997
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointPutAsyncWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>Task of OAuth2ChallengeDtoResponse</returns>
        System.Threading.Tasks.Task<OAuth2ChallengeDtoResponse> ApiProxyOauth2ChallengeGetAsync (Guid? tenantId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>Task of ApiResponse (OAuth2ChallengeDtoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2ChallengeDtoResponse>> ApiProxyOauth2ChallengeGetAsyncWithHttpInfo (Guid? tenantId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId"></param>
        /// <returns>Task of UnifiedContactResponse</returns>
        System.Threading.Tasks.Task<UnifiedContactResponse> ApiProxyUnifiedContactsExternalIdGetAsync (string externalId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId"></param>
        /// <returns>Task of ApiResponse (UnifiedContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnifiedContactResponse>> ApiProxyUnifiedContactsExternalIdGetAsyncWithHttpInfo (string externalId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnifiedContactsListResponse</returns>
        System.Threading.Tasks.Task<UnifiedContactsListResponse> ApiProxyUnifiedContactsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnifiedContactsListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnifiedContactsListResponse>> ApiProxyUnifiedContactsGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ApiProxyApi : IApiProxyApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiProxyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiProxyApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiProxyApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApiProxyApi()
        {
            this.Configuration = Client.Configuration.Default;

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiProxyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiProxyApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CallActionResponse</returns>
        public CallActionResponse ApiProxyEndpointDelete (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody6 body = null)
        {
             ApiResponse<CallActionResponse> localVarResponse = ApiProxyEndpointDeleteWithHttpInfo(xTenantId, integrationName, endpoint, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        public ApiResponse< CallActionResponse > ApiProxyEndpointDeleteWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody6 body = null)
        {
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointDelete");
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointDelete");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointDelete");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CallActionResponse</returns>
        public async System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointDeleteAsync (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody6 body = null)
        {
             ApiResponse<CallActionResponse> localVarResponse = await ApiProxyEndpointDeleteAsyncWithHttpInfo(xTenantId, integrationName, endpoint, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointDeleteAsyncWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody6 body = null)
        {
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointDelete");
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointDelete");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointDelete");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="xTenantId"></param>
        /// <returns>CallActionResponse</returns>
        public CallActionResponse ApiProxyEndpointGet (string integrationName, string endpoint, Guid? xTenantId)
        {
             ApiResponse<CallActionResponse> localVarResponse = ApiProxyEndpointGetWithHttpInfo(integrationName, endpoint, xTenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="xTenantId"></param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        public ApiResponse< CallActionResponse > ApiProxyEndpointGetWithHttpInfo (string integrationName, string endpoint, Guid? xTenantId)
        {
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointGet");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointGet");
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointGet");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="xTenantId"></param>
        /// <returns>Task of CallActionResponse</returns>
        public async System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointGetAsync (string integrationName, string endpoint, Guid? xTenantId)
        {
             ApiResponse<CallActionResponse> localVarResponse = await ApiProxyEndpointGetAsyncWithHttpInfo(integrationName, endpoint, xTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="xTenantId"></param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointGetAsyncWithHttpInfo (string integrationName, string endpoint, Guid? xTenantId)
        {
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointGet");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointGet");
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointGet");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CallActionResponse</returns>
        public CallActionResponse ApiProxyEndpointPatch (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody9 body = null)
        {
             ApiResponse<CallActionResponse> localVarResponse = ApiProxyEndpointPatchWithHttpInfo(xTenantId, integrationName, endpoint, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        public ApiResponse< CallActionResponse > ApiProxyEndpointPatchWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody9 body = null)
        {
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointPatch");
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointPatch");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointPatch");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CallActionResponse</returns>
        public async System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointPatchAsync (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody9 body = null)
        {
             ApiResponse<CallActionResponse> localVarResponse = await ApiProxyEndpointPatchAsyncWithHttpInfo(xTenantId, integrationName, endpoint, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointPatchAsyncWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody9 body = null)
        {
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointPatch");
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointPatch");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointPatch");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CallActionResponse</returns>
        public CallActionResponse ApiProxyEndpointPost (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody3 body = null)
        {
             ApiResponse<CallActionResponse> localVarResponse = ApiProxyEndpointPostWithHttpInfo(xTenantId, integrationName, endpoint, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        public ApiResponse< CallActionResponse > ApiProxyEndpointPostWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody3 body = null)
        {
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointPost");
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointPost");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointPost");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CallActionResponse</returns>
        public async System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointPostAsync (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody3 body = null)
        {
             ApiResponse<CallActionResponse> localVarResponse = await ApiProxyEndpointPostAsyncWithHttpInfo(xTenantId, integrationName, endpoint, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointPostAsyncWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody3 body = null)
        {
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointPost");
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointPost");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointPost");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CallActionResponse</returns>
        public CallActionResponse ApiProxyEndpointPut (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody body = null)
        {
             ApiResponse<CallActionResponse> localVarResponse = ApiProxyEndpointPutWithHttpInfo(xTenantId, integrationName, endpoint, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CallActionResponse</returns>
        public ApiResponse< CallActionResponse > ApiProxyEndpointPutWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody body = null)
        {
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointPut");
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointPut");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointPut");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CallActionResponse</returns>
        public async System.Threading.Tasks.Task<CallActionResponse> ApiProxyEndpointPutAsync (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody body = null)
        {
             ApiResponse<CallActionResponse> localVarResponse = await ApiProxyEndpointPutAsyncWithHttpInfo(xTenantId, integrationName, endpoint, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 21_997 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 21_997_101 | TenantNotFound |  |  | 21_997_102 | IntegrationNotFound |  |  | 21_997_103 | UnknownExceptionWhenCallingThirdPartyApi |  |  | 21_997_104 | UnknownExceptionWhenCallAction |  |  | 21_997_105 | IntegrationIsNotEnabled |  |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTenantId"></param>
        /// <param name="integrationName"></param>
        /// <param name="endpoint"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CallActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallActionResponse>> ApiProxyEndpointPutAsyncWithHttpInfo (Guid? xTenantId, string integrationName, string endpoint, ApiproxyEndpointBody body = null)
        {
            // verify the required parameter 'xTenantId' is set
            if (xTenantId == null)
                throw new ApiException(400, "Missing required parameter 'xTenantId' when calling ApiProxyApi->ApiProxyEndpointPut");
            // verify the required parameter 'integrationName' is set
            if (integrationName == null)
                throw new ApiException(400, "Missing required parameter 'integrationName' when calling ApiProxyApi->ApiProxyEndpointPut");
            // verify the required parameter 'endpoint' is set
            if (endpoint == null)
                throw new ApiException(400, "Missing required parameter 'endpoint' when calling ApiProxyApi->ApiProxyEndpointPut");

            var localVarPath = "/api-proxy/{endpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (integrationName != null) localVarPathParams.Add("integrationName", this.Configuration.ApiClient.ParameterToString(integrationName)); // path parameter
            if (endpoint != null) localVarPathParams.Add("endpoint", this.Configuration.ApiClient.ParameterToString(endpoint)); // path parameter
            if (xTenantId != null) localVarHeaderParams.Add("X-Tenant-Id", this.Configuration.ApiClient.ParameterToString(xTenantId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyEndpointPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallActionResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>OAuth2ChallengeDtoResponse</returns>
        public OAuth2ChallengeDtoResponse ApiProxyOauth2ChallengeGet (Guid? tenantId = null)
        {
             ApiResponse<OAuth2ChallengeDtoResponse> localVarResponse = ApiProxyOauth2ChallengeGetWithHttpInfo(tenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>ApiResponse of OAuth2ChallengeDtoResponse</returns>
        public ApiResponse< OAuth2ChallengeDtoResponse > ApiProxyOauth2ChallengeGetWithHttpInfo (Guid? tenantId = null)
        {

            var localVarPath = "/api-proxy/oauth2/challenge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyOauth2ChallengeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ChallengeDtoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OAuth2ChallengeDtoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ChallengeDtoResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>Task of OAuth2ChallengeDtoResponse</returns>
        public async System.Threading.Tasks.Task<OAuth2ChallengeDtoResponse> ApiProxyOauth2ChallengeGetAsync (Guid? tenantId = null)
        {
             ApiResponse<OAuth2ChallengeDtoResponse> localVarResponse = await ApiProxyOauth2ChallengeGetAsyncWithHttpInfo(tenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>Task of ApiResponse (OAuth2ChallengeDtoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2ChallengeDtoResponse>> ApiProxyOauth2ChallengeGetAsyncWithHttpInfo (Guid? tenantId = null)
        {

            var localVarPath = "/api-proxy/oauth2/challenge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyOauth2ChallengeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ChallengeDtoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OAuth2ChallengeDtoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ChallengeDtoResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId"></param>
        /// <returns>UnifiedContactResponse</returns>
        public UnifiedContactResponse ApiProxyUnifiedContactsExternalIdGet (string externalId)
        {
             ApiResponse<UnifiedContactResponse> localVarResponse = ApiProxyUnifiedContactsExternalIdGetWithHttpInfo(externalId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId"></param>
        /// <returns>ApiResponse of UnifiedContactResponse</returns>
        public ApiResponse< UnifiedContactResponse > ApiProxyUnifiedContactsExternalIdGetWithHttpInfo (string externalId)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling ApiProxyApi->ApiProxyUnifiedContactsExternalIdGet");

            var localVarPath = "/api-proxy/unified/contacts/{externalId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("externalId", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyUnifiedContactsExternalIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnifiedContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnifiedContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedContactResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId"></param>
        /// <returns>Task of UnifiedContactResponse</returns>
        public async System.Threading.Tasks.Task<UnifiedContactResponse> ApiProxyUnifiedContactsExternalIdGetAsync (string externalId)
        {
             ApiResponse<UnifiedContactResponse> localVarResponse = await ApiProxyUnifiedContactsExternalIdGetAsyncWithHttpInfo(externalId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId"></param>
        /// <returns>Task of ApiResponse (UnifiedContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnifiedContactResponse>> ApiProxyUnifiedContactsExternalIdGetAsyncWithHttpInfo (string externalId)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling ApiProxyApi->ApiProxyUnifiedContactsExternalIdGet");

            var localVarPath = "/api-proxy/unified/contacts/{externalId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("externalId", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyUnifiedContactsExternalIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnifiedContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnifiedContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedContactResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnifiedContactsListResponse</returns>
        public UnifiedContactsListResponse ApiProxyUnifiedContactsGet ()
        {
             ApiResponse<UnifiedContactsListResponse> localVarResponse = ApiProxyUnifiedContactsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnifiedContactsListResponse</returns>
        public ApiResponse< UnifiedContactsListResponse > ApiProxyUnifiedContactsGetWithHttpInfo ()
        {

            var localVarPath = "/api-proxy/unified/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyUnifiedContactsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnifiedContactsListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnifiedContactsListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedContactsListResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnifiedContactsListResponse</returns>
        public async System.Threading.Tasks.Task<UnifiedContactsListResponse> ApiProxyUnifiedContactsGetAsync ()
        {
             ApiResponse<UnifiedContactsListResponse> localVarResponse = await ApiProxyUnifiedContactsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnifiedContactsListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnifiedContactsListResponse>> ApiProxyUnifiedContactsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api-proxy/unified/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApiProxyUnifiedContactsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnifiedContactsListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnifiedContactsListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedContactsListResponse)));
        }

    }
}
