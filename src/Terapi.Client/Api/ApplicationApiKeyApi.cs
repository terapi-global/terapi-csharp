/* 
 * Terapi.Web.Api-v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Terapi.Client.Client;
using Terapi.Client.Model;

namespace Terapi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IApplicationApiKeyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 16_999
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_999_101 | ApplicationNotFound | Application not found. |  | 16_999_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_999_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateApplicationApiKeyResponse</returns>
        CreateApplicationApiKeyResponse ApplicationApikeyGeneratePost (ApplicationapikeyGenerateBody body = null);

        /// <summary>
        /// 16_999
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_999_101 | ApplicationNotFound | Application not found. |  | 16_999_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_999_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateApplicationApiKeyResponse</returns>
        ApiResponse<CreateApplicationApiKeyResponse> ApplicationApikeyGeneratePostWithHttpInfo (ApplicationapikeyGenerateBody body = null);
        /// <summary>
        /// 16_995
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_995_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_995_102 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <returns>ApplicationApiKeyByApplicationIdResponse</returns>
        ApplicationApiKeyByApplicationIdResponse ApplicationApikeyGetByApplicationIdGet (Guid? applicationId = null);

        /// <summary>
        /// 16_995
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_995_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_995_102 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <returns>ApiResponse of ApplicationApiKeyByApplicationIdResponse</returns>
        ApiResponse<ApplicationApiKeyByApplicationIdResponse> ApplicationApikeyGetByApplicationIdGetWithHttpInfo (Guid? applicationId = null);
        /// <summary>
        /// 16_998
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_998_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_998_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>RevokeApplicationApiKeyResponse</returns>
        RevokeApplicationApiKeyResponse ApplicationApikeyRevokeDelete (Guid? id = null);

        /// <summary>
        /// 16_998
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_998_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_998_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of RevokeApplicationApiKeyResponse</returns>
        ApiResponse<RevokeApplicationApiKeyResponse> ApplicationApikeyRevokeDeleteWithHttpInfo (Guid? id = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 16_999
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_999_101 | ApplicationNotFound | Application not found. |  | 16_999_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_999_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreateApplicationApiKeyResponse</returns>
        System.Threading.Tasks.Task<CreateApplicationApiKeyResponse> ApplicationApikeyGeneratePostAsync (ApplicationapikeyGenerateBody body = null);

        /// <summary>
        /// 16_999
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_999_101 | ApplicationNotFound | Application not found. |  | 16_999_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_999_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateApplicationApiKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateApplicationApiKeyResponse>> ApplicationApikeyGeneratePostAsyncWithHttpInfo (ApplicationapikeyGenerateBody body = null);
        /// <summary>
        /// 16_995
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_995_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_995_102 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <returns>Task of ApplicationApiKeyByApplicationIdResponse</returns>
        System.Threading.Tasks.Task<ApplicationApiKeyByApplicationIdResponse> ApplicationApikeyGetByApplicationIdGetAsync (Guid? applicationId = null);

        /// <summary>
        /// 16_995
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_995_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_995_102 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationApiKeyByApplicationIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiKeyByApplicationIdResponse>> ApplicationApikeyGetByApplicationIdGetAsyncWithHttpInfo (Guid? applicationId = null);
        /// <summary>
        /// 16_998
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_998_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_998_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of RevokeApplicationApiKeyResponse</returns>
        System.Threading.Tasks.Task<RevokeApplicationApiKeyResponse> ApplicationApikeyRevokeDeleteAsync (Guid? id = null);

        /// <summary>
        /// 16_998
        /// </summary>
        /// <remarks>
        /// ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_998_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_998_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (RevokeApplicationApiKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RevokeApplicationApiKeyResponse>> ApplicationApikeyRevokeDeleteAsyncWithHttpInfo (Guid? id = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ApplicationApiKeyApi : IApplicationApiKeyApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApiKeyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApiKeyApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApiKeyApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApplicationApiKeyApi()
        {
            this.Configuration = Client.Configuration.Default;

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApiKeyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationApiKeyApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// 16_999 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_999_101 | ApplicationNotFound | Application not found. |  | 16_999_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_999_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateApplicationApiKeyResponse</returns>
        public CreateApplicationApiKeyResponse ApplicationApikeyGeneratePost (ApplicationapikeyGenerateBody body = null)
        {
             ApiResponse<CreateApplicationApiKeyResponse> localVarResponse = ApplicationApikeyGeneratePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 16_999 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_999_101 | ApplicationNotFound | Application not found. |  | 16_999_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_999_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateApplicationApiKeyResponse</returns>
        public ApiResponse< CreateApplicationApiKeyResponse > ApplicationApikeyGeneratePostWithHttpInfo (ApplicationapikeyGenerateBody body = null)
        {

            var localVarPath = "/application-apikey/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApplicationApikeyGeneratePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateApplicationApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateApplicationApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateApplicationApiKeyResponse)));
        }

        /// <summary>
        /// 16_999 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_999_101 | ApplicationNotFound | Application not found. |  | 16_999_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_999_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreateApplicationApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<CreateApplicationApiKeyResponse> ApplicationApikeyGeneratePostAsync (ApplicationapikeyGenerateBody body = null)
        {
             ApiResponse<CreateApplicationApiKeyResponse> localVarResponse = await ApplicationApikeyGeneratePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 16_999 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_999_101 | ApplicationNotFound | Application not found. |  | 16_999_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_999_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateApplicationApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateApplicationApiKeyResponse>> ApplicationApikeyGeneratePostAsyncWithHttpInfo (ApplicationapikeyGenerateBody body = null)
        {

            var localVarPath = "/application-apikey/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApplicationApikeyGeneratePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateApplicationApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateApplicationApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateApplicationApiKeyResponse)));
        }

        /// <summary>
        /// 16_995 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_995_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_995_102 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <returns>ApplicationApiKeyByApplicationIdResponse</returns>
        public ApplicationApiKeyByApplicationIdResponse ApplicationApikeyGetByApplicationIdGet (Guid? applicationId = null)
        {
             ApiResponse<ApplicationApiKeyByApplicationIdResponse> localVarResponse = ApplicationApikeyGetByApplicationIdGetWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 16_995 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_995_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_995_102 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <returns>ApiResponse of ApplicationApiKeyByApplicationIdResponse</returns>
        public ApiResponse< ApplicationApiKeyByApplicationIdResponse > ApplicationApikeyGetByApplicationIdGetWithHttpInfo (Guid? applicationId = null)
        {

            var localVarPath = "/application-apikey/get-by-application-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ApplicationId", applicationId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApplicationApikeyGetByApplicationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationApiKeyByApplicationIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationApiKeyByApplicationIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationApiKeyByApplicationIdResponse)));
        }

        /// <summary>
        /// 16_995 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_995_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_995_102 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <returns>Task of ApplicationApiKeyByApplicationIdResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationApiKeyByApplicationIdResponse> ApplicationApikeyGetByApplicationIdGetAsync (Guid? applicationId = null)
        {
             ApiResponse<ApplicationApiKeyByApplicationIdResponse> localVarResponse = await ApplicationApikeyGetByApplicationIdGetAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 16_995 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_995_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_995_102 | UnknownExceptionWhenTryingFetchApplications | Unknown exception when trying to fetch applications. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationApiKeyByApplicationIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationApiKeyByApplicationIdResponse>> ApplicationApikeyGetByApplicationIdGetAsyncWithHttpInfo (Guid? applicationId = null)
        {

            var localVarPath = "/application-apikey/get-by-application-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ApplicationId", applicationId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApplicationApikeyGetByApplicationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationApiKeyByApplicationIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationApiKeyByApplicationIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationApiKeyByApplicationIdResponse)));
        }

        /// <summary>
        /// 16_998 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_998_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_998_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>RevokeApplicationApiKeyResponse</returns>
        public RevokeApplicationApiKeyResponse ApplicationApikeyRevokeDelete (Guid? id = null)
        {
             ApiResponse<RevokeApplicationApiKeyResponse> localVarResponse = ApplicationApikeyRevokeDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 16_998 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_998_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_998_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of RevokeApplicationApiKeyResponse</returns>
        public ApiResponse< RevokeApplicationApiKeyResponse > ApplicationApikeyRevokeDeleteWithHttpInfo (Guid? id = null)
        {

            var localVarPath = "/application-apikey/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Id", id)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApplicationApikeyRevokeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevokeApplicationApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RevokeApplicationApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevokeApplicationApiKeyResponse)));
        }

        /// <summary>
        /// 16_998 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_998_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_998_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of RevokeApplicationApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<RevokeApplicationApiKeyResponse> ApplicationApikeyRevokeDeleteAsync (Guid? id = null)
        {
             ApiResponse<RevokeApplicationApiKeyResponse> localVarResponse = await ApplicationApikeyRevokeDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 16_998 ### Error Codes  | Code | Name | Message |  | :- -- | :- -- | :- -- |  | 16_998_101 | ApplicationApiKeyNotFound | Application API key not found. |  | 16_998_102 | UnknownExceptionWhenCheckApplicationExistence | Unknown exception when checking if application exists. |  | 16_998_103 | UnknownExceptionWhenGenerateApplicationApiKey | Unknown exception when generating application API key. |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (RevokeApplicationApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RevokeApplicationApiKeyResponse>> ApplicationApikeyRevokeDeleteAsyncWithHttpInfo (Guid? id = null)
        {

            var localVarPath = "/application-apikey/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Id", id)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApplicationApikeyRevokeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevokeApplicationApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RevokeApplicationApiKeyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevokeApplicationApiKeyResponse)));
        }

    }
}
